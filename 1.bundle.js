webpackJsonp([1],{6075:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),i=a(0),u=r(i),c=a(8),m=r(c),d=a(19),f=a(21),p=r(f),h=a(29),g=r(h),b=a(44),v=a(6083),y=r(v),N=a(24),E=a(69),x=a(67),C=a(333),w=r(C),P=a(341),k=a(181),S=r(k),F=a(85),D=r(F),T=a(171),_=r(T),L=a(190),j=r(L),O=a(6086),I=a(370),B=a(31),A=r(B),R=a(32),z=r(R),M=function(e){return{root:{padding:"0em 1.041vw 0.5em 1.041vw",backgroundColor:e.palette.background.main,fontFamily:e.font.title.fontFamily},appFrame:{display:"flex",flexDirection:"row",maxHeight:"100vh"},fredaGif:{justifyContent:"center",alignItems:"center",marginTop:5},titleName:{paddingLeft:"1.1979vw"},border:{height:"4.444rem"},borderRight:{borderRight:"0.5px solid #395C73",color:"white",height:"80%"},voiceMail:{color:"white",height:"80%",paddingLeft:"2%",borderLeft:"0.5px solid #395C73"},totalAmount:{height:"80%",marginLeft:"1%"},smallFont:{fontSize:".8rem",color:e.palette.secondary.main,fontFamily:e.font.title.fontFamily},bigFont:{color:"white",fontSize:"1em"},selectedTab:{borderBottom:"3px solid white",color:"#FFFFFF",opacity:.8},unselectedTab:{color:e.palette.secondary.main,opacity:.8},tabFont:{width:"12.7vw",padding:"0.2rem 0.2rem .5em 0"},cardGrid:{margin:"0 -1.041vw -1.85vh 0",paddingTop:"1%"},headerGrid:{height:"7.407vh",marginTop:"1.9vh"},processed:{fontSize:"1.34rem"},total:{fontSize:"0.89rem",opacity:"0.4"},mintotal:{fontSize:".89rem"},timeSubscript:{fontSize:".89rem"},progressSummary:{color:"#989898",fontSize:"1em",marginRight:"1rem"},loadingDiv:{height:"70vh"},freda:{width:"30%",paddingTop:"5px"},backButtonLink:{height:"calc(1.46vh + 1.46vw)"},headerFont:{fontSize:"1.3rem",opacity:"0.4"},retryButton:{color:"white",height:"5rem",width:"5rem",cursor:"pointer"},retryMsg:{color:"white",fontFamily:"Roboto",fontSize:"1rem",cursor:"pointer"},retryParent:{flexDirection:"column",height:"70vh"},topHeader:{height:"3.981vh",marginTop:"1.12vh",display:"flex",alignItems:"center"}}},W=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.handleFreda=function(){console.log("CALLED>>>>>");var e=setInterval(function(){var t=speechSynthesis.getVoices();if(console.log(t),0!==t.length){var r=new SpeechSynthesisUtterance("Hi "+a.props.user.firstName+"!");r.voice=t[1],speechSynthesis.speak(r),clearInterval(e)}},200);(0,P.getChatBot)().speechRecognitionApi.initializeRecordAudio(a.stopRecording)},a.stopRecording=function(){console.log("--"),a.pauseGif();var e=(0,P.getChatBot)();e.speechRecognitionApi.recorder.stopRecording(e.speechRecognitionApi.onStop)},a.handlePrevious=function(){if(a.props.customers.pageNumber-1>=0){a.setState({isLastPage:!1}),a.setState({loadingUpcoming:!0});var e=a.props.customers.pageNumber-1;0===e&&a.setState({isFirstPage:!0}),I.overviewService.getUpcoming({pageNumber:e,pageSize:5}).then(function(e){a.setState({upcoming:e}),a.setState({loadingUpcoming:!1})}),a.props.prevPage()}},a.handleNext=function(){if(!a.state.isLastPage){a.setState({isFirstPage:!1}),a.setState({loading:!0}),a.setState({loadingUpcoming:!0});var e=a.props.customers.pageNumber+1;5*(e+1)>=a.state.toCallCustomers?(a.setState({isLastPage:!0}),a.setState({loadingUpcoming:!1})):I.overviewService.getUpcoming({pageNumber:e,pageSize:5}).then(function(e){a.setState({upcoming:e}),a.setState({loadingUpcoming:!1})}),5*e===a.props.customers.customers.length?O.callWorkBookService.getCallWorkBookResponse({pageNumber:e,pageSize:5}).then(function(e){a.setState({overview:e.overview}),a.props.addCustomers({customers:e.workbookItems}),a.setState({loading:!1})}):a.setState({loading:!1}),a.props.nextPage()}},a.getSpinner=function(e){return u.default.createElement(g.default,{container:!0},u.default.createElement(g.default,{item:!0,xs:12},u.default.createElement("div",{className:(0,m.default)(e.loadingDiv,e.centerFlexBox)},u.default.createElement(D.default,null))))},a.changeTab=a.changeTab.bind(a),a.state={loading:!0,callworkbookApiFailed:!1,upcomingApiFailed:!1,loadingUpcoming:!0,upcoming:{},currentTab:"CALL",isFirstPage:!0,isLastPage:!1,handleFreda:a.handleFreda.bind.this,from:"",last:"",toCallCustomers:""},a.props.changeCaller(""),a.props.resetCustomers(),a.props.resetPageNumber(),O.callWorkBookService.getCallWorkBookResponse({pageNumber:0,pageSize:5}).then(function(e){a.setState({overview:e.overview});var t=e.overview.totalCustomerCount;a.setState({toCallCustomers:t}),t<=5?(a.setState({isLastPage:!0}),a.setState({loadingUpcoming:!1})):I.overviewService.getUpcoming({pageNumber:0,pageSize:5}).then(function(e){var t=e;t.bucketNames=a.props.user.bucketNames,a.setState({upcoming:t}),a.setState({loadingUpcoming:!1})}).catch(function(e){a.setState({loadingUpcoming:!1}),a.setState({upcomingApiFailed:!0})}),a.props.addCustomers({customers:e.workbookItems}),a.setState({loading:!1})}),a}return s(t,e),l(t,[{key:"changeTab",value:function(e){e.preventDefault(),"CALL"==this.state.currentTab?this.setState(function(e){return{currentTab:"FINISHED"}}):this.setState(function(e){return{currentTab:"CALL"}})}},{key:"render",value:function(){var e=this.props,t=e.classes,a=(e.theme,"CALL"==this.state.currentTab?t.selectedTab:t.unselectedTab);"FINISHED"==this.state.currentTab?t.selectedTab:t.unselectedTab;if(this.state.overview)var r=[this.state.overview.completedCallingMinutes,this.state.overview.expectedCallingMinutes],o=Math.floor(r[0]),n=Math.floor(r[0]/60),s=Math.floor(r[0]%60),l=Math.floor(r[1]),i=Math.floor(r[1]/60),c=Math.floor(r[1]%60);return u.default.createElement("div",{className:t.appFrame},u.default.createElement(_.default,null),this.state.overview&&this.props.user.bucketNames&&u.default.createElement(w.default,{onSwipeLeft:this.handleNext,onSwipeRight:this.handlePrevious},u.default.createElement("div",{className:t.root},u.default.createElement("div",{className:t.topHeader},u.default.createElement("div",{style:{height:"calc(1.46vh + 1.46vw)"}},u.default.createElement(b.Link,{to:"/",className:t.backButtonLink},u.default.createElement(S.default,{className:t.backButton}))),u.default.createElement("div",null,u.default.createElement("div",{className:(0,m.default)(t.titleName,t.titleNameText)},"Call Workboard"))),u.default.createElement(g.default,{item:!0,xs:12,md:12,lg:12,sm:12,container:!0,alignItems:"center",justify:"space-between",className:t.headerGrid},u.default.createElement(g.default,{item:!0,xs:4,md:4,lg:4,sm:4,container:!0,justify:"flex-start"},u.default.createElement(g.default,{item:!0,xs:4,md:5,lg:5,sm:4,xl:5,align:"center"},u.default.createElement("div",{style:{display:"flex",flexDirection:"row",width:"27vw"}},u.default.createElement(p.default,{className:(0,m.default)(a,t.tabFont)},"TO CALL LIST (",this.state.overview.totalCustomerCount,")")))),u.default.createElement(g.default,{item:!0,container:!0,xs:7,md:8,lg:7,sm:6,xl:7,alignItems:"center",justify:"flex-end",className:t.border},u.default.createElement(g.default,{item:!0,xs:2,md:2,lg:2,sm:2,className:t.progressSummary,align:"right"}),u.default.createElement(g.default,{item:!0,xs:2,md:3,lg:3,sm:2,xl:3,container:!0,alignItems:"center",justify:"center"},u.default.createElement(g.default,{item:!0,container:!0,xs:10,md:10,lg:10,sm:10,xl:10,className:t.borderRight,alignItems:"center",justify:"center"},u.default.createElement(g.default,{item:!0,xs:12,md:12,lg:12,sm:12},u.default.createElement("span",{className:t.processed},this.state.overview.processedCustomerCount),u.default.createElement("span",{className:t.headerFont},"/"),u.default.createElement("span",{className:t.total},this.state.overview.totalCustomerCount)),u.default.createElement(g.default,{item:!0,xs:12,md:12,lg:12,sm:12},u.default.createElement(p.default,{className:t.smallFont},"Total Customers Called")))),u.default.createElement(g.default,{item:!0,xs:4,md:3,lg:3,sm:4,xl:3,className:t.totalAmount,container:!0,alignItems:"center",justify:"center",spacing:0},u.default.createElement(g.default,{container:!0,item:!0,className:t.bigFont},u.default.createElement(g.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement("span",{className:t.processed},n,u.default.createElement("span",{className:t.timeSubscript},"hr"),(s>0||0===o)&&u.default.createElement("span",{className:t.processed}," "+s,u.default.createElement("span",{className:t.timeSubscript},"min")),u.default.createElement("span",{className:t.headerFont},"/")),u.default.createElement("span",{className:t.total},i>0&&i+"hr",(c>0||0===l)&&u.default.createElement("span",{className:t.mintotal}," "+c+"min"))),u.default.createElement(g.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement(p.default,{className:t.smallFont},"Total Time Spent on Call")))),u.default.createElement(g.default,{item:!0,xs:4,md:3,lg:3,sm:4,xl:3,className:t.voiceMail,container:!0,alignItems:"center",justify:"center",spacing:0},u.default.createElement(g.default,{item:!0,container:!0,className:t.bigFont},u.default.createElement(g.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement("span",{className:t.processed},"$",(0,x.formatter)(this.state.overview.totalPastDueProcessed,"")),u.default.createElement("span",{className:t.headerFont},"/"),u.default.createElement("span",{className:t.total},"$",(0,x.formatter)(this.state.overview.totalPastDueAmount,""))),u.default.createElement(g.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement(p.default,{className:t.smallFont},"Total Past Due Touched")))))),u.default.createElement("div",{className:t.cardGrid},!this.state.loading&&!this.state.loadingUpcoming&&!this.state.callworkbookApiFailed&&"CALL"==this.state.currentTab&&u.default.createElement(y.default,{handlePrevious:this.handlePrevious,handleNext:this.handleNext,upcoming:this.state.upcoming,isFirstPage:this.state.isFirstPage,isLastPage:this.state.isLastPage,toCallCustomers:this.state.toCallCustomers}),"FINISHED"==this.state.currentTab,(this.state.loading||this.state.loadingUpcoming)&&u.default.createElement(g.default,{container:!0},u.default.createElement(g.default,{item:!0,xs:12},u.default.createElement("div",{className:(0,m.default)(t.loadingDiv,t.centerFlexBox)},u.default.createElement(D.default,null)))),!this.state.loading&&!this.state.loadingUpcoming&&this.state.callworkbookApiFailed&&u.default.createElement("div",{className:(0,m.default)(t.retryParent,t.centerFlexBox),onClick:this.getOverviewResponse},u.default.createElement(j.default,{className:t.retryButton}),u.default.createElement(p.default,{className:t.retryMsg},"Something Went Wrong."),u.default.createElement(p.default,{className:t.retryMsg},"Please retry"))))),(this.state.loading||this.state.loadingUpcoming)&&void 0===this.state.overview&&u.default.createElement(g.default,{container:!0},u.default.createElement(g.default,{item:!0,xs:12},u.default.createElement("div",{className:(0,m.default)(t.loadingDiv,t.centerFlexBox)},u.default.createElement(D.default,null)))))}}]),t}(u.default.Component),U=function(e){return{user:e.personalDetails,customers:e.customers}},H=function(e){return{changeCaller:function(t){return e((0,E.changeCaller)(t))},addCustomers:function(t){return e((0,E.addCustomers)(t))},prevPage:function(t){return e((0,E.prevPage)(t))},nextPage:function(t){return e((0,E.nextPage)(t))},resetCustomers:function(t){return e((0,E.resetCustomers)(t))},resetPageNumber:function(t){return e((0,E.resetPageNumber)(t))}}},G=(0,A.default)(M,z.default);t.default=(0,N.connect)(U,H)((0,d.withStyles)(G,{withTheme:!0})(W))},6083:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),i=a(0),u=r(i),c=a(19),m=a(6084),d=r(m),f=a(6085),p=r(f),h=a(29),g=r(h),b=a(167),v=r(b),y=a(337),N=r(y),E=a(336),x=r(E),C=a(24),w=a(170),P=r(w),k=a(8),S=r(k),F=a(4),D=r(F),T=a(31),_=r(T),L=a(32),j=r(L),O=function(e){return{nextFab:{top:"53.7% !important",right:.25*e.spacing.unit},prevFab:{top:"53.7% !important",marginLeft:"-.7rem"},spacing:{padding:"0 1.041vw 1.85vh 0"}}},I={isFirstPage:!0,isLastPage:!0,toCallCustomers:1,handleNext:{},handlePrevious:{},upcoming:{}},B={isFirstPage:D.default.bool.isRequired,isLastPage:D.default.bool.isRequired,toCallCustomers:D.default.number.isRequired,handleNext:D.default.func.isRequired,handlePrevious:D.default.func.isRequired},A=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.getCustomerNumbers=function(e,t){a.from=5*a.props.customers.pageNumber+1,a.last=t?e?a.props.toCallCustomers:a.props.toCallCustomers%5>0?5*a.props.customers.pageNumber+a.props.toCallCustomers%5:5*a.props.customers.pageNumber+5:5*a.props.customers.pageNumber+5},a.showPrev=function(){document.getElementById("fab_prev").style.visibility="visible"},a.hidePrev=function(){document.getElementById("fab_prev").style.visibility="hidden"},a.getCustomerCards=function(e){return a.props.customers.customers.slice(5*a.props.customers.pageNumber,5*a.props.customers.pageNumber+5).map(function(t,r){return u.default.createElement(g.default,{item:!0,xs:4,className:e.spacing,key:r},u.default.createElement(d.default,{customerDetails:t,customerId:t.id,id:r,toCallCustomers:a.props.toCallCustomers}))})},a.state={pageNumber:1,customers:a.props.customers,from:null,last:null},a.from=null,a.to=null,a.getCustomerNumbers(a.props.isFirstPage,a.props.isLastPage),a}return s(t,e),l(t,[{key:"componentWillReceiveProps",value:function(e){this.getCustomerNumbers(e.isFirstPage,e.isLastPage)}},{key:"render",value:function(){var e=this.props.classes;return u.default.createElement(g.default,{container:!0},this.getCustomerCards(e),u.default.createElement(g.default,{item:!0,xs:4,className:e.spacing},!this.props.isLastPage&&u.default.createElement(p.default,{customerDetails:this.props.upcoming,id:"upcoming-card"})),u.default.createElement(v.default,{id:"fab_prev",classes:{disabled:e.disabledFab},color:"primary","aria-label":"Add",className:(0,S.default)(e.prevFab,e.fabButtons),size:"small",onClick:this.props.handlePrevious,disabled:this.props.isFirstPage},u.default.createElement(x.default,{className:this.props.isFirstPage?e.disabledArrowicon:e.arrowIcon})),u.default.createElement(v.default,{color:"primary",classes:{disabled:e.disabledFab},"aria-label":"Add",className:(0,S.default)(e.nextFab,e.fabButtons),size:"small",onClick:this.props.handleNext,disabled:this.props.isLastPage},u.default.createElement(N.default,{className:this.props.isLastPage?e.disabledArrowicon:e.arrowIcon})),u.default.createElement(P.default,null," Viewing ",this.from," to ",this.last," of ",this.props.toCallCustomers," "))}}]),t}(u.default.PureComponent),R=function(e){return{customers:e.customers}};A.propTypes=B,A.defaultProps=I;var z=(0,_.default)(O,j.default);t.default=(0,C.connect)(R,{})((0,c.withStyles)(z,{withTheme:!0})(A))},6084:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),i=a(0),u=r(i),c=a(19),m=a(21),d=r(m),f=a(29),p=r(f),h=a(44),g=a(338),b=r(g),v=a(176),y=r(v),N=a(24),E=a(69),x=a(89),C=r(x),w=a(67),P=a(23),k=a(4),S=r(k),F=a(31),D=r(F),T=a(32),_=r(T),L=a(8),j=r(L),O=function(e){return{cardStyle:{height:"38.925vh",borderRadius:"4px",backgroundColor:e.palette.cardBackground.main,borderTop:"0px",boxShadow:"0px 3px 6px rgba(0,0,0,.20)"},link:{textDecoration:"none",color:"inherit"},brokenPromisesGrid:{height:"22vh"},promiseType:{color:e.palette.primary.main,fontSize:".87rem",width:"90%",opacity:.4},containerGrid:{height:"100%"},brokenPromiseImg:{opacity:.8,height:"3.11111111111rem",width:"3.11111111111rem",margin:".7em 0"},brokenPromiseNumber:{fontSize:"1.5em",color:e.palette.primary.main},cardHeader:{zIndex:"2",height:"5.2vh"},customerNumber:{paddingRight:".5rem",fontSize:".8rem",color:e.palette.primary.main,fontFamily:e.font.title.fontFamily,opacity:.4},customerName:{fontSize:"1.333rem",fontFamily:e.font.title.fontFamily,paddingLeft:".6rem",color:e.palette.primary.main,opacity:.5},noItem:{height:"24vh",pointWidth:22,marginBottom:"0em",chartHeight:"24vh"},icon:{width:"1em",height:"1em",marginRight:".4em",zIndex:"1",color:e.palette.primary.main},brokenPromisesDiv:{flexDirection:"column"},toolTip:{maxWidth:"100vw"}}},I={chartColors:["#5DAAE0"],customerDetails:{},customerId:0},B={customerDetails:S.default.object.isRequired,charColors:S.default.array,toCallCustomers:S.default.number.isRequired},A=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.setChartConfig=function(){a.chartsData=a.props.customerDetails.pastDueBucketDocumentAmount?a.props.customerDetails.pastDueBucketDocumentAmount.slice(0,5):[],a.xdata=a.props.customerDetails.bucketNames?a.props.customerDetails.bucketNames.slice(0,5):[],a.chartsData.unshift(a.props.customerDetails.totalCurrentOpenAmount),a.xdata.unshift("Current due"),a.hasBrokenPromise=a.props.customerDetails.totalBrokenPromises>0},a.state={index:0},a.setChartConfig(),a}return s(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.theme,r={color:a.palette.primary.main,fontSize:"0.7rem",fontFamily:"Roboto",opacity:.6},o="/callprep/"+this.props.customerId;return u.default.createElement(h.Link,{className:t.link,onClick:this.updateCustomerNumber,to:{pathname:o,state:{openContacts:!1,toCallCustomers:this.props.toCallCustomers}}},u.default.createElement(y.default,{customCard:t.cardStyle},u.default.createElement(p.default,{container:!0,className:t.containerGrid,alignItems:"flex-start",justify:"center"},u.default.createElement(p.default,{item:!0,container:!0,xs:12,md:12,alignItems:"center",justify:"flex-start",className:t.cardHeader},u.default.createElement(p.default,{item:!0,xs:8,align:"left"},this.props.customerDetails.customerName&&this.props.customerDetails.customerName.length>27?u.default.createElement(P.Tooltip,{title:this.props.customerDetails.customerName,className:t.toolTip},u.default.createElement(d.default,{noWrap:!0,className:t.customerName},this.props.customerDetails.customerName)):u.default.createElement(d.default,{noWrap:!0,className:t.customerName},this.props.customerDetails.customerName)),u.default.createElement(p.default,{item:!0,xs:4,align:"right"},u.default.createElement("span",{className:t.customerNumber},this.props.customerDetails.customerNumber))),u.default.createElement(p.default,{item:!0,container:!0,xs:10,alignItems:"center",justify:"center"},u.default.createElement(p.default,{item:!0,xs:12},(0,w.zeroCheck)(this.chartsData)&&u.default.createElement("div",{className:(0,j.default)(t.noItem,t.centerFlexBox,t.noItemText)},u.default.createElement(C.default,{className:t.icon}),"There are no dues"),!(0,w.zeroCheck)(this.chartsData)&&u.default.createElement(b.default,{marginTop:"-2%",pointWidthUnit:.1,formatter:w.callWorkboardHistogramFormatter,pointWidth:22,lineHeight:"1rem",spacingTop:60,data:this.chartsData,pageName:"Calling",dataLabelsCrop:!1,enableDataLabels:!0,dataLabelsOverflow:"none",marginBottom:"6vh",chartHeight:"29vh",xdata:this.xdata,div:this.props.customerId.toString(),datalabelsColor:"#FFFFFF",xAxisOverflow:"allow",xAxisRotation:"0",xAxisLabelStyles:r,dataLabelsX:5,chartColors:this.props.chartColors}))),u.default.createElement(p.default,{item:!0,xs:2,container:!0,justify:"center",alignItems:"flex-end",style:{height:"28.2vh"}},u.default.createElement(p.default,{item:!0,container:!0,xs:12,className:t.brokenPromisesGrid,style:{borderLeft:"0.5px  ridge #324D60",marginTop:"0%"},align:"center"},this.hasBrokenPromise?u.default.createElement("div",{className:(0,j.default)(t.brokenPromisesDiv,t.centerFlexBox)},u.default.createElement("div",{className:t.brokenPromiseNumber}," ",this.props.customerDetails.totalBrokenPromises),u.default.createElement("img",{className:t.brokenPromiseImg,src:"/tovo/static/brokenPromise.svg"}),u.default.createElement(d.default,{className:t.promiseType},"Broken Promises")):u.default.createElement("div",{className:(0,j.default)(t.brokenPromisesDiv,t.centerFlexBox)},u.default.createElement("img",{className:t.brokenPromiseImg,src:"/tovo/static/noBrokenPromise.svg"}),u.default.createElement(d.default,{className:t.promiseType},"No Broken Promises")))))))}}]),t}(u.default.Component),R=function(e){return{customers:e.customers}},z=function(e){return{resetCustomerNumber:function(t){return e((0,E.resetCustomerNumber)(t))}}};A.defaultProps=I,A.propTypes=B;var M=(0,D.default)(O,_.default);t.default=(0,N.connect)(R,z)((0,c.withStyles)(M,{withTheme:!0})(A))},6085:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),i=a(0),u=r(i),c=a(8),m=(r(c),a(19)),d=a(29),f=r(d),p=a(338),h=r(p),g=a(176),b=r(g),v=a(24),y=a(69),N=a(4),E=r(N),x=a(67),C=function(e){return{cardStyle:{height:"38.925vh",backgroundColor:e.palette.cardBackground.main,borderRadius:"4px",boxShadow:"none"},containerGrid:{height:"100%"},cardHeader:{zIndex:"2",height:"5.2vh"},titleName:{paddingLeft:".6rem",color:e.palette.primary.main,opacity:.5,fontSize:"1.333rem"}}},w={id:"upcoming-card",customerDetails:null},P={customerDetails:E.default.object.isRequired},k=["#5DAAE0"],S=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.setChartConfig=function(){a.chartsData=[],a.props.customerDetails.upcomingPastDueBucketDocumentAmount&&(a.chartsData=a.props.customerDetails.upcomingPastDueBucketDocumentAmount.slice(0,5)),a.xdata=a.props.user.bucketNames?a.props.user.bucketNames.slice(0,5):[],a.chartsData.unshift(a.props.customerDetails.upcomingOpenAmount),a.xdata.unshift("Current due")},a.state={index:0},a.setChartConfig(),a}return s(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.theme,r={color:a.palette.primary.main,fontSize:"0.7rem",opacity:.6,fontFamily:"Roboto"};return u.default.createElement(b.default,{customCard:t.cardStyle},u.default.createElement(f.default,{container:!0,className:t.containerGrid,alignItems:"flex-start",justify:"center"},u.default.createElement(f.default,{item:!0,container:!0,xs:12,md:12,alignItems:"center",justify:"flex-start",className:t.cardHeader},u.default.createElement(f.default,{item:!0,xs:12,align:"left"},u.default.createElement("span",{className:t.titleName},"Remaining Account Balance Summary"))),u.default.createElement(f.default,{container:!0,alignItems:"center",justify:"center"},u.default.createElement(f.default,{item:!0,xs:12},u.default.createElement(h.default,{formatter:x.callWorkboardHistogramFormatter,pointWidth:22,pointWidthUnit:.1,lineHeight:"1rem",spacingTop:90,data:this.chartsData,pageName:"Calling",dataLabelsCrop:!1,enableDataLabels:!0,dataLabelsOverflow:"none",marginBottom:"0em",chartHeight:"29vh",xdata:this.xdata,div:"upcoming-div",datalabelsColor:"#FFFFFF",xAxisOverflow:"allow",xAxisRotation:"0",xAxisLabelStyles:r,dataLabelsX:5,chartColors:k}))),u.default.createElement(f.default,{item:!0,xs:3,container:!0,justify:"center",alignItems:"center",style:{height:"100%"}})))}}]),t}(u.default.Component);S.propTypes=P,S.defaultProps=w;var F=function(e){return{user:e.personalDetails,customers:e.customers}},D=function(e){return{resetCustomerNumber:function(t){return e((0,y.resetCustomerNumber)(t))}}};t.default=(0,v.connect)(F,D)((0,m.withStyles)(C,{withTheme:!0})(S))},6086:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){return s.default.get(i.default.apiUrl+"/callworkbook",{params:e}).then(function(e){return(0,u.handleApiResponse)(e)}).catch(function(e){return(0,u.handleApiResponse)(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.callWorkBookService=void 0;var n=a(41),s=r(n),l=a(40),i=r(l),u=a(116);t.callWorkBookService={getCallWorkBookResponse:o}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,