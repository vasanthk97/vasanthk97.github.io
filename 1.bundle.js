webpackJsonp([1],{6067:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},c=a(0),u=r(c),m=a(8),d=r(m),p=a(19),f=a(22),h=r(f),g=a(37),b=r(g),v=a(46),y=a(6082),w=r(y),C=a(24),N=a(65),x=a(82),E=a(332),S=r(E),k=a(342),F=a(175),P=r(F),T=a(109),_=r(T),I=a(319),j=r(I),L=a(339),A=r(L),D=a(6085),O=a(6069),B=function(e){return{root:{padding:"0em 1.041vw 0.5em 1.041vw",backgroundColor:e.palette.background.main,width:"100%",alignItems:"center",paddingBottom:"0",justifyContent:"center",fontFamily:e.font.title.fontFamily},appFrame:{display:"flex",flexDirection:"row",maxHeight:"100vh"},arrowButton:{padding:"1%",color:"#CCCCCC"},hide:{display:"none"},header:l({},e.mixins.toolbar),content:{flexGrow:1,backgroundColor:"#333333",paddingTop:"0px",height:"95vh",overflow:"hidden"},fredaGif:{justifyContent:"center",alignItems:"center",marginTop:5},grid:{margin:"0px",height:"10vh"},typography:{fontFamily:e.font.title.fontFamily,fontSize:"25px",color:"#CCCCCC"},link:{textDecoration:"none",color:"black"},pageTab1:{padding:"1%",width:"fit-content",backgroundColor:"#CCCCCC",marginLeft:"2%",marginBottom:"2%",fontSize:"12px",fontWeight:"bold"},pageTab2:{padding:"1%",width:"fit-content",backgroundColor:"#5F5F5F",marginBottom:"2%",fontSize:"12px"},backButton:{height:"calc(1.46vh + 1.46vw)",width:"calc(1.46vh + 1.46vw)",cursor:"pointer",color:e.palette.primary.main},titleName:{fontSize:"1.6rem",color:"#5DAAE0",display:"inline-block",paddingLeft:"1.1979vw"},accoutName:{fontSize:"0.8888888888888888em",color:"white",fontFamily:e.font.title.fontFamily,margin:"0.875em 2.375em 0.875em 0em"},border:{height:"4.444rem"},borderRight:{borderRight:"0.5px solid #395C73",color:"white",height:"80%"},voiceMail:{color:"white",height:"80%",paddingLeft:"2%",borderLeft:"0.5px solid #395C73"},totalAmount:{height:"80%",marginLeft:"1%"},smallFont:{fontSize:".8rem",color:e.palette.secondary.main,fontFamily:e.font.title.fontFamily},bigFont:{color:"white",fontSize:"1em"},selectedTab:{borderBottom:"3px solid white",color:"#FFFFFF",opacity:.8},unselectedTab:{color:e.palette.secondary.main,opacity:.8},tabFont:{width:"12.7vw",paddingBottom:".5em",paddingTop:"0.2rem",paddingRight:"0.2rem"},cardGrid:{marginRight:"-1.041vw",marginBottom:"-1.85vh",paddingTop:"1%"},headerGrid:{height:"7.407vh",marginTop:"1.9vh"},processed:{fontSize:"1.34rem"},total:{fontSize:"0.89rem",opacity:"0.4"},mintotal:{fontSize:".89rem"},timeSubscript:{fontSize:".89rem"},progressSummary:{color:"#989898",fontSize:"1em",marginRight:"1rem"},loadingDiv:{justifyContent:"center",alignItems:"center",display:"flex",height:"70vh"},freda:{width:"30%",paddingTop:"5px"},backButtonLink:{height:"calc(1.46vh + 1.46vw)"},headerFont:{fontSize:"1.3rem",opacity:"0.4"},retryButton:{color:"white",height:"5rem",width:"5rem",cursor:"pointer"},retryMsg:{color:"white",fontFamily:"Roboto",fontSize:"1rem",cursor:"pointer"},retryParent:{justifyContent:"center",alignItems:"center",display:"flex",flexDirection:"column",height:"70vh"},topHeader:{height:"3.981vh",marginTop:"1.12vh"}}},z=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.handleFreda=function(){console.log("CALLED>>>>>");var e=setInterval(function(){var t=speechSynthesis.getVoices();if(console.log(t),0!==t.length){var r=new SpeechSynthesisUtterance("Hi "+a.props.user.firstName+"!");r.voice=t[1],speechSynthesis.speak(r),clearInterval(e)}},200);(0,k.getChatBot)().speechRecognitionApi.initializeRecordAudio(a.stopRecording)},a.stopRecording=function(){console.log("--"),a.pauseGif();var e=(0,k.getChatBot)();e.speechRecognitionApi.recorder.stopRecording(e.speechRecognitionApi.onStop)},a.handlePrevious=function(){if(a.props.customers.pageNumber-1>=0){a.setState({isLastPage:!1}),a.setState({loadingUpcoming:!0});var e=a.props.customers.pageNumber-1;0===e&&a.setState({isFirstPage:!0}),O.overviewService.getUpcoming({pageNumber:e,pageSize:5}).then(function(e){a.setState({upcoming:e}),a.setState({loadingUpcoming:!1})}),a.props.prevPage()}},a.handleNext=function(){if(!a.state.isLastPage){a.setState({isFirstPage:!1}),a.setState({loading:!0}),a.setState({loadingUpcoming:!0});var e=a.props.customers.pageNumber+1;5*(e+1)>=a.state.toCallCustomers?(a.setState({isLastPage:!0}),a.setState({loadingUpcoming:!1})):O.overviewService.getUpcoming({pageNumber:e,pageSize:5}).then(function(e){a.setState({upcoming:e}),a.setState({loadingUpcoming:!1})}),5*e===a.props.customers.customers.length?D.callWorkBookService.getCallWorkBookResponse({pageNumber:e,pageSize:5}).then(function(e){a.setState({overview:e.overview}),a.props.addCustomers({customers:e.workbookItems}),a.setState({loading:!1})}):a.setState({loading:!1}),a.props.nextPage()}},a.spinner=function(e){return u.default.createElement(b.default,{container:!0},u.default.createElement(b.default,{item:!0,xs:12},u.default.createElement("div",{className:e.loadingDiv},u.default.createElement(_.default,null))))},a.changeTab=a.changeTab.bind(a),a.state={loading:!0,callworkbookApiFailed:!1,upcomingApiFailed:!1,loadingUpcoming:!0,upcoming:{},currentTab:"CALL",isFirstPage:!0,isLastPage:!1,handleFreda:a.handleFreda.bind.this,from:"",last:"",toCallCustomers:""},a.props.changeCaller(""),a.props.resetCustomers(),a.props.resetPageNumber(),D.callWorkBookService.getCallWorkBookResponse({pageNumber:0,pageSize:5}).then(function(e){a.setState({overview:e.overview});var t=e.overview.totalCustomerCount;a.setState({toCallCustomers:t}),t<=5?(a.setState({isLastPage:!0}),a.setState({loadingUpcoming:!1})):O.overviewService.getUpcoming({pageNumber:0,pageSize:5}).then(function(e){var t=e;t.bucketNames=a.props.user.bucketNames,a.setState({upcoming:t}),a.setState({loadingUpcoming:!1})}).catch(function(e){a.setState({loadingUpcoming:!1}),a.setState({upcomingApiFailed:!0})}),a.props.addCustomers({customers:e.workbookItems}),a.setState({loading:!1})}),a}return i(t,e),s(t,[{key:"changeTab",value:function(e){e.preventDefault(),"CALL"==this.state.currentTab?this.setState(function(e){return{currentTab:"FINISHED"}}):this.setState(function(e){return{currentTab:"CALL"}})}},{key:"render",value:function(){var e=this.props,t=e.classes,a=(e.theme,"CALL"==this.state.currentTab?t.selectedTab:t.unselectedTab);"FINISHED"==this.state.currentTab?t.selectedTab:t.unselectedTab;if(this.state.overview)var r=[this.state.overview.completedCallingMinutes,this.state.overview.expectedCallingMinutes],o=Math.floor(r[0]),n=Math.floor(r[0]/60),i=Math.floor(r[0]%60),s=Math.floor(r[1]),l=Math.floor(r[1]/60),c=Math.floor(r[1]%60);return u.default.createElement("div",{className:t.appFrame},u.default.createElement(j.default,null),this.state.overview&&this.props.user.bucketNames&&u.default.createElement(S.default,{onSwipeLeft:this.handleNext,onSwipeRight:this.handlePrevious},u.default.createElement("div",{className:t.root},u.default.createElement(b.default,{item:!0,container:!0,alignItems:"center",xs:12,className:t.topHeader},u.default.createElement(b.default,{item:!0,style:{height:"calc(1.46vh + 1.46vw)"}},u.default.createElement(v.Link,{to:"/",className:t.backButtonLink},u.default.createElement(P.default,{className:t.backButton}))),u.default.createElement(b.default,{item:!0},u.default.createElement("div",{className:t.titleName},"Call Workboard"))),u.default.createElement(b.default,{item:!0,xs:12,md:12,lg:12,sm:12,container:!0,alignItems:"center",justify:"space-between",className:t.headerGrid},u.default.createElement(b.default,{item:!0,xs:4,md:4,lg:4,sm:4,container:!0,justify:"flex-start"},u.default.createElement(b.default,{item:!0,xs:4,md:5,lg:5,sm:4,xl:5,align:"center"},u.default.createElement("div",{style:{display:"flex",flexDirection:"row",width:"27vw"}},u.default.createElement(h.default,{className:(0,d.default)(a,t.tabFont)},"TO CALL LIST (",this.state.overview.totalCustomerCount,")")))),u.default.createElement(b.default,{item:!0,container:!0,xs:7,md:8,lg:7,sm:6,xl:7,alignItems:"center",justify:"flex-end",className:t.border},u.default.createElement(b.default,{item:!0,xs:2,md:2,lg:2,sm:2,className:t.progressSummary,align:"right"}),u.default.createElement(b.default,{item:!0,xs:2,md:3,lg:3,sm:2,xl:3,container:!0,alignItems:"center",justify:"center"},u.default.createElement(b.default,{item:!0,container:!0,xs:10,md:10,lg:10,sm:10,xl:10,className:t.borderRight,alignItems:"center",justify:"center"},u.default.createElement(b.default,{item:!0,xs:12,md:12,lg:12,sm:12},u.default.createElement("span",{className:t.processed},this.state.overview.processedCustomerCount),u.default.createElement("span",{className:t.headerFont},"/"),u.default.createElement("span",{className:t.total},this.state.overview.totalCustomerCount)),u.default.createElement(b.default,{item:!0,xs:12,md:12,lg:12,sm:12},u.default.createElement(h.default,{className:t.smallFont},"Total Customers Called")))),u.default.createElement(b.default,{item:!0,xs:4,md:3,lg:3,sm:4,xl:3,className:t.totalAmount,container:!0,alignItems:"center",justify:"center",spacing:0},u.default.createElement(b.default,{container:!0,item:!0,className:t.bigFont},u.default.createElement(b.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement("span",{className:t.processed},n,u.default.createElement("span",{className:t.timeSubscript},"hr"),(i>0||0===o)&&u.default.createElement("span",{className:t.processed}," "+i,u.default.createElement("span",{className:t.timeSubscript},"min")),u.default.createElement("span",{className:t.headerFont},"/")),u.default.createElement("span",{className:t.total},l>0&&l+"hr",(c>0||0===s)&&u.default.createElement("span",{className:t.mintotal}," "+c+"min"))),u.default.createElement(b.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement(h.default,{className:t.smallFont},"Total Time Spent on Call")))),u.default.createElement(b.default,{item:!0,xs:4,md:3,lg:3,sm:4,xl:3,className:t.voiceMail,container:!0,alignItems:"center",justify:"center",spacing:0},u.default.createElement(b.default,{item:!0,container:!0,className:t.bigFont},u.default.createElement(b.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement("span",{className:t.processed},"$",(0,x.formatter)(this.state.overview.totalPastDueProcessed,"")),u.default.createElement("span",{className:t.headerFont},"/"),u.default.createElement("span",{className:t.total},"$",(0,x.formatter)(this.state.overview.totalPastDueAmount,""))),u.default.createElement(b.default,{item:!0,xs:11,md:11,lg:11,sm:11},u.default.createElement(h.default,{className:t.smallFont},"Total Past Due Touched")))))),u.default.createElement("div",{className:t.cardGrid},!this.state.loading&&!this.state.loadingUpcoming&&!this.state.callworkbookApiFailed&&"CALL"==this.state.currentTab&&u.default.createElement(w.default,{handlePrevious:this.handlePrevious,handleNext:this.handleNext,upcoming:this.state.upcoming,isFirstPage:this.state.isFirstPage,isLastPage:this.state.isLastPage,toCallCustomers:this.state.toCallCustomers}),"FINISHED"==this.state.currentTab,(this.state.loading||this.state.loadingUpcoming)&&u.default.createElement(b.default,{container:!0},u.default.createElement(b.default,{item:!0,xs:12},u.default.createElement("div",{className:t.loadingDiv},u.default.createElement(_.default,null)))),!this.state.loading&&!this.state.loadingUpcoming&&this.state.callworkbookApiFailed&&u.default.createElement("div",{className:t.retryParent,onClick:this.getOverviewResponse},u.default.createElement(A.default,{className:t.retryButton}),u.default.createElement(h.default,{className:t.retryMsg},"Something Went Wrong."),u.default.createElement(h.default,{className:t.retryMsg},"Please retry"))))),(this.state.loading||this.state.loadingUpcoming)&&void 0===this.state.overview&&u.default.createElement(b.default,{container:!0},u.default.createElement(b.default,{item:!0,xs:12},u.default.createElement("div",{className:t.loadingDiv},u.default.createElement(_.default,null)))))}}]),t}(u.default.Component),R=function(e){return{user:e.personalDetails,customers:e.customers}},M=function(e){return{changeCaller:function(t){return e((0,N.changeCaller)(t))},addCustomers:function(t){return e((0,N.addCustomers)(t))},prevPage:function(t){return e((0,N.prevPage)(t))},nextPage:function(t){return e((0,N.nextPage)(t))},resetCustomers:function(t){return e((0,N.resetCustomers)(t))},resetPageNumber:function(t){return e((0,N.resetPageNumber)(t))}}};t.default=(0,C.connect)(R,M)((0,p.withStyles)(B,{withTheme:!0})(z))},6069:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(){return s.default.get(c.default.apiUrl+"/overview").then(function(e){return(0,u.handleApiResponse)(e)}).catch(function(e){return(0,u.handleApiResponse)(e)})}function n(e){return s.default.get(c.default.apiUrl+"/upcoming",{params:e}).then(function(e){return(0,u.handleApiResponse)(e)}).catch(function(e){return(0,u.handleApiResponse)(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.overviewService=void 0;var i=a(45),s=r(i),l=a(44),c=r(l),u=a(165);t.overviewService={getSummary:o,getUpcoming:n}},6082:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),l=a(0),c=r(l),u=a(19),m=a(6083),d=r(m),p=a(6084),f=r(p),h=a(37),g=r(h),b=a(159),v=r(b),y=a(337),w=r(y),C=a(336),N=r(C),x=a(24),E=a(318),S=r(E),k=a(8),F=(r(k),function(e){return{next:{top:"53.7%",right:.25*e.spacing.unit,position:"absolute",height:"calc(1.6vh + 1.6vw)",width:"calc(1.6vh + 1.6vw)",zIndex:"2",opacity:1,boxShadow:"none",backgroundColor:"transparent","&:hover":{backgroundColor:e.palette.secondary.main}},prev:{top:"53.7%",position:"absolute",height:"calc(1.6vh + 1.6vw)",width:"calc(1.6vh + 1.6vw)",zIndex:"2",boxShadow:"none",opacity:1,backgroundColor:"transparent",marginLeft:"-.7rem","&:hover":{opacity:1,backgroundColor:e.palette.secondary.main}},pageNumber:{color:e.palette.primary.main,opacity:.6,fontSize:"0.9rem",paddingTop:"1px !important",paddingBottom:"1px !important"},legalMessage:{color:e.palette.primary.main,opacity:.6,fontSize:"0.9rem",paddingTop:"1px !important",paddingBottom:"1px !important"},arrowIcon:{color:e.palette.primary.main,opacity:1,height:"calc(1.6vh + 1.6vw)",width:"calc(1.6vh + 1.6vw)","&:hover":{opacity:1,height:"calc(1.6vh + 1.6vw)",width:"calc(1.6vh + 1.6vw)"}},disabledArrowicon:{color:e.palette.primary.main,height:"calc(1.6vh + 1.6vw)",width:"calc(1.6vh + 1.6vw)",opacity:.25},disabledFab:{boxShadow:"none",backgroundColor:"transparent !important"},spacing:{paddingRight:"1.041vw",paddingBottom:"1.85vh"}}}),P=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.getCustomerNumbers=function(e,t){a.from=5*a.props.customers.pageNumber+1,a.last=t?e?a.props.toCallCustomers:a.props.toCallCustomers%5>0?5*a.props.customers.pageNumber+a.props.toCallCustomers%5:5*a.props.customers.pageNumber+5:5*a.props.customers.pageNumber+5},a.showPrev=function(){document.getElementById("fab_prev").style.visibility="visible"},a.hidePrev=function(){document.getElementById("fab_prev").style.visibility="hidden"},a.state={pageNumber:1,customers:a.props.customers,from:null,last:null},a.from=null,a.to=null,a.getCustomerNumbers(a.props.isFirstPage,a.props.isLastPage),a}return i(t,e),s(t,[{key:"componentWillReceiveProps",value:function(e){this.getCustomerNumbers(e.isFirstPage,e.isLastPage)}},{key:"render",value:function(){var e=this,t=this.props.classes,a=this.props.customers.customers.slice(5*this.props.customers.pageNumber,5*this.props.customers.pageNumber+5).map(function(a,r){return c.default.createElement(g.default,{item:!0,xs:4,className:t.spacing,key:r},c.default.createElement(d.default,{customerDetails:a,customerId:a.id,id:r,toCallCustomers:e.props.toCallCustomers}))});return c.default.createElement(g.default,{container:!0},a,c.default.createElement(g.default,{item:!0,xs:4,className:t.spacing},!this.props.isLastPage&&c.default.createElement(f.default,{customerDetails:this.props.upcoming,id:"upcoming-card"})),c.default.createElement(v.default,{id:"fab_prev",classes:{disabled:t.disabledFab},color:"primary","aria-label":"Add",className:t.prev,size:"small",onClick:this.props.handlePrevious,disabled:this.props.isFirstPage},c.default.createElement(N.default,{className:this.props.isFirstPage?t.disabledArrowicon:t.arrowIcon})),c.default.createElement(v.default,{color:"primary",classes:{disabled:t.disabledFab},"aria-label":"Add",className:t.next,size:"small",onClick:this.props.handleNext,disabled:this.props.isLastPage},c.default.createElement(w.default,{className:this.props.isLastPage?t.disabledArrowicon:t.arrowIcon})),c.default.createElement(S.default,null," Viewing ",this.from," to ",this.last," of ",this.props.toCallCustomers," "))}}]),t}(c.default.PureComponent),T=function(e){return{customers:e.customers}};t.default=(0,x.connect)(T,{})((0,u.withStyles)(F,{withTheme:!0})(P))},6083:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),l=a(0),c=r(l),u=a(19),m=a(22),d=r(m),p=a(37),f=r(p),h=a(46),g=a(338),b=r(g),v=a(325),y=r(v),w=a(24),C=a(65),N=a(112),x=r(N),E=a(82),S=a(23),k=function(e){return{cardStyle:{height:"38.925vh",borderRadius:"4px",backgroundColor:e.palette.cardBackground.main,borderTop:"0px",boxShadow:"0px 3px 6px rgba(0,0,0,.20)"},link:{textDecoration:"none",color:"inherit"},titleStyle:{font:e.font.title.fontFamily,color:"#FFFFFF",fontSize:"1.667em"},brokenPromisesGrid:{height:"22vh"},promiseType:{color:e.palette.primary.main,fontSize:".87rem",width:"90%",opacity:.4},containerGrid:{height:"100%"},brokenPromises:{display:"flex",alignItems:"center"},brokenPromiseImg:{opacity:.8,height:"3.11111111111rem",width:"3.11111111111rem",marginTop:".7em",marginBottom:".7em"},brokenPromiseNumber:{fontSize:"1.5em",color:e.palette.primary.main},gridAccount:{height:"2em",width:"2em"},gridAccountImg:{height:"1.7rem",width:"1.7rem",backgroundColor:e.palette.primary.main,color:e.palette.cardBackground.main,borderRadius:"50%"},cardHeader:{zIndex:"2",height:"5.2vh"},customerNumber:{paddingRight:".5rem",fontSize:".8rem",color:e.palette.primary.main,fontFamily:e.font.title.fontFamily,opacity:.4},customerName:{fontSize:"1.333rem",fontFamily:e.font.title.fontFamily,paddingLeft:".6rem",color:e.palette.primary.main,opacity:.5},noItem:{height:"24vh",justifyContent:"center",alignItems:"center",display:"flex",fontWeight:500,color:e.palette.primary.main,fontSize:".8em",marginLeft:".6em",opacity:"0.65",fontFamily:e.font.title.fontFamily,pointWidth:22,marginBottom:"0em",chartHeight:"24vh"},icon:{width:"1em",height:"1em",marginRight:".4em",zIndex:"1",color:e.palette.primary.main},brokenPromisesDiv:{justifyContent:"center",alignItems:"center",display:"flex",flexDirection:"column"},toolTip:{maxWidth:"100vw"}}},F=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.handleChangeIndex=function(e){a.setState({index:e})},a.updateCustomerNumber=function(){var e=5*a.props.customers.pageNumber,t=e+a.props.id;a.props.resetCustomerNumber({customerNumber:t})},a.state={index:0},a}return i(t,e),s(t,[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.theme,r={color:a.palette.primary.main,fontSize:"0.7rem",fontFamily:"Roboto",opacity:.6},o=this.props.customerDetails.pastDueBucketDocumentAmount.slice(0,5),n=this.props.customerDetails.bucketNames.slice(0,5);o.unshift(this.props.customerDetails.totalCurrentOpenAmount),n.unshift("Current due");var i=["#5DAAE0"],s="/callprep/"+this.props.customerId,l=this.props.customerDetails.totalBrokenPromises>0;return c.default.createElement(h.Link,{className:t.link,onClick:this.updateCustomerNumber,to:{pathname:s,state:{openContacts:!1,toCallCustomers:this.props.toCallCustomers}}},c.default.createElement(y.default,{customCard:t.cardStyle},c.default.createElement(f.default,{container:!0,className:t.containerGrid,alignItems:"flex-start",justify:"center"},c.default.createElement(f.default,{item:!0,container:!0,xs:12,md:12,alignItems:"center",justify:"flex-start",className:t.cardHeader},c.default.createElement(f.default,{item:!0,xs:8,align:"left"},this.props.customerDetails.customerName.length>27?c.default.createElement(S.Tooltip,{title:this.props.customerDetails.customerName,className:t.toolTip},c.default.createElement(d.default,{noWrap:!0,className:t.customerName},this.props.customerDetails.customerName)):c.default.createElement(d.default,{noWrap:!0,className:t.customerName},this.props.customerDetails.customerName)),c.default.createElement(f.default,{item:!0,xs:4,align:"right"},c.default.createElement("span",{className:t.customerNumber},this.props.customerDetails.customerNumber))),c.default.createElement(f.default,{item:!0,container:!0,xs:10,alignItems:"center",justify:"center"},c.default.createElement(f.default,{item:!0,xs:12},(0,E.zeroCheck)(o)&&c.default.createElement("div",{className:t.noItem},c.default.createElement(x.default,{className:t.icon}),"There are no dues"),!(0,E.zeroCheck)(o)&&c.default.createElement(b.default,{marginTop:"-2%",pointWidth:22,lineHeight:"1rem",spacingTop:60,data:o,pageName:"Calling",dataLabelsCrop:!1,enableDataLabels:!0,dataLabelsOverflow:"none",marginBottom:"6vh",chartHeight:"29vh",xdata:n,div:this.props.customerId.toString(),datalabelsColor:"#FFFFFF",xAxisOverflow:"allow",xAxisRotation:"0",xAxisLabelStyles:r,dataLabelsX:5,chartColors:i}))),c.default.createElement(f.default,{item:!0,xs:2,container:!0,justify:"center",alignItems:"flex-end",style:{height:"28.2vh"}},c.default.createElement(f.default,{item:!0,container:!0,xs:12,className:t.brokenPromisesGrid,style:{borderLeft:"0.5px  ridge #324D60",marginTop:"0%"},align:"center"},l&&c.default.createElement("div",{className:t.brokenPromisesDiv},c.default.createElement("div",{className:t.brokenPromiseNumber}," ",this.props.customerDetails.totalBrokenPromises),c.default.createElement("img",{className:t.brokenPromiseImg,src:"/tovo/static/brokenPromise.svg"}),c.default.createElement(d.default,{className:t.promiseType},"Broken Promises")),!1===l&&c.default.createElement("div",{className:t.brokenPromisesDiv},c.default.createElement("img",{className:t.brokenPromiseImg,src:"/tovo/static/noBrokenPromise.svg"}),c.default.createElement(d.default,{className:t.promiseType},"No Broken Promises")))))))}}]),t}(c.default.Component),P=function(e){return{customers:e.customers}},T=function(e){return{resetCustomerNumber:function(t){return e((0,C.resetCustomerNumber)(t))}}};t.default=(0,w.connect)(P,T)((0,u.withStyles)(k,{withTheme:!0})(F))},6084:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),c=a(0),u=r(c),m=a(8),d=(r(m),a(19)),p=a(22),f=(r(p),a(37)),h=r(f),g=(a(46),a(338)),b=r(g),v=a(325),y=r(v),w=a(24),C=a(65),N=function(e){return{cardStyle:{height:"38.925vh",backgroundColor:e.palette.cardBackground.main,borderRadius:"4px",boxShadow:"none"},link:{textDecoration:"none",color:"inherit"},titleStyle:{font:e.font.title.fontFamily,color:"#FFFFFF",fontSize:"1.333rem"},headerStyle:{display:"flex",flexDirection:"row",height:"2.5em",paddingLeft:"5%",paddingTop:"1%",alignItems:"center"},brokenPromisesGrid:{},promiseType:{color:e.palette.primary.main,fontSize:".8em",width:"60%"},containerGrid:{height:"100%"},brokenPromises:{display:"flex",alignItems:"center"},brokenPromiseImg:{height:"2em",width:"3em",marginTop:".7em",marginBottom:".7em"},brokenPromiseNumber:{fontSize:"1.5em",color:"#FFFFFF"},gridAccount:{height:"2em",width:"2em"},gridAccountImg:{height:"2em",width:"2em",backgroundColor:e.palette.primary.main,color:e.palette.cardBackground.main,borderRadius:"50%"},cardHeader:{zIndex:"2",height:"5.2vh"},titleName:s({fontSize:"1.34rem",paddingLeft:".6rem",color:e.palette.primary.main,opacity:.5},"fontSize","1.333rem")}},x=function(e){function t(e){o(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.handleChangeIndex=function(e){a.setState({index:e})},a.updateCustomerNumber=function(){var e=5*a.props.customers.pageNumber,t=e+a.props.id;a.props.resetCustomerNumber({customerNumber:t})},a.state={index:0},a}return i(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.theme,r={color:a.palette.primary.main,fontSize:"0.7rem",opacity:.6,fontFamily:"Roboto"},o=[];this.props.customerDetails.upcomingPastDueBucketDocumentAmount&&(o=this.props.customerDetails.upcomingPastDueBucketDocumentAmount.slice(0,5));var n=this.props.user.bucketNames.slice(0,5);o.unshift(this.props.customerDetails.upcomingOpenAmount),n.unshift("Current due");var i=["#5DAAE0"];return i=i.slice(0,n.length),u.default.createElement(y.default,{customCard:t.cardStyle},u.default.createElement(h.default,{container:!0,className:t.containerGrid,alignItems:"flex-start",justify:"center"},u.default.createElement(h.default,{item:!0,container:!0,xs:12,md:12,alignItems:"center",justify:"flex-start",className:t.cardHeader},u.default.createElement(h.default,{item:!0,xs:12,align:"left"},u.default.createElement("span",{className:t.titleName},"Remaining Account Balance Summary"))),u.default.createElement(h.default,{container:!0,alignItems:"center",justify:"center"},u.default.createElement(h.default,{item:!0,xs:12},u.default.createElement(b.default,{pointWidth:22,lineHeight:"1rem",spacingTop:90,data:o,pageName:"Calling",dataLabelsCrop:!1,enableDataLabels:!0,dataLabelsOverflow:"none",marginBottom:"0em",chartHeight:"29vh",xdata:n,div:"upcoming-div",datalabelsColor:"#FFFFFF",xAxisOverflow:"allow",xAxisRotation:"0",xAxisLabelStyles:r,dataLabelsX:5,chartColors:i}))),u.default.createElement(h.default,{item:!0,xs:3,container:!0,justify:"center",alignItems:"center",style:{height:"100%"}})))}}]),t}(u.default.Component),E=function(e){return{user:e.personalDetails,customers:e.customers}},S=function(e){return{resetCustomerNumber:function(t){return e((0,C.resetCustomerNumber)(t))}}};t.default=(0,w.connect)(E,S)((0,d.withStyles)(N,{withTheme:!0})(x))},6085:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){return i.default.get(l.default.apiUrl+"/callworkbook",{params:e}).then(function(e){return(0,c.handleApiResponse)(e)}).catch(function(e){return(0,c.handleApiResponse)(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.callWorkBookService=void 0;var n=a(45),i=r(n),s=a(44),l=r(s),c=a(165);t.callWorkBookService={getCallWorkBookResponse:o}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,