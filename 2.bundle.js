webpackJsonp([2],{6066:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,a,l){return a&&e(t.prototype,a),l&&e(t,l),t}}(),c=a(0),d=l(c),s=a(325),u=l(s),m=a(19),f=a(37),p=l(f),g=a(46),h=a(6080),v=l(h),y=a(6081),C=l(y),b=a(22),E=l(b),x=a(339),w=l(x),N=a(178),S=l(N),T=a(352),O=l(T),_=a(116),j=l(_),M=a(112),F=l(M),z=a(177),P=l(z),k=a(319),D=l(k),I=a(109),A=l(I),R=a(318),G=l(R),H=a(6069),B=function(e){return{root:{paddingRight:"1.041vw",paddingLeft:"1.041vw",backgroundImage:e.palette.background.main,width:"100%",alignItems:"center",paddingBottom:"0",justifyContent:"center",fontFamily:e.font.title.fontFamily},cardStyle:{backgroundColor:e.palette.cardBackground.main,width:"100%",height:"43.47vh",paddingTop:"0",boxShadow:"0px 3px 6px rgba(0,0,0,.20)"},titleName:{fontSize:"1.6rem",color:"#5DAAE0",display:"inline-block",paddingTop:"1.12vh",paddingBottom:"2.129vh"},link:{textDecoration:"none",color:"black"},appFrame:{display:"flex",flexDirection:"row"},icon:{width:"1.6rem",height:"1.6rem",marginRight:".4em",color:"white",zIndex:"1"},comingSoon:{height:"40vh",justifyContent:"center",opacity:.2,alignItems:"center",display:"flex",fontWeight:500,color:e.palette.primary.main},noItem:{height:"15em",justifyContent:"center",alignItems:"center",display:"flex",fontWeight:500,color:e.palette.primary.main,fontSize:".8em",marginLeft:".6em",opacity:"0.65",fontFamily:e.font.title.fontFamily},infoIcon:{width:"1em",height:"1em",marginRight:".4em",zIndex:"1",color:e.palette.primary.main},branding:{height:"4.4444vh",width:"10vw",paddingRight:"0.888rem",paddingTop:"1.38vh"},headerBifurcator:{borderLeft:"1px solid #395C73",height:"75%",marginTop:"auto",marginBottom:"auto",width:"1px"},loadingDiv:{justifyContent:"center",alignItems:"center",display:"flex",flexDirection:"column",height:"100%"},retryButton:{color:"white",height:"2rem",width:"2rem",paddingBottom:"5%",cursor:"pointer"},retryMsg:{color:"white",fontFamily:"Roboto",fontSize:"1rem",cursor:"pointer"},rightGrid:{marginLeft:"-8.333vw !important"},leftCard:{paddingRight:"calc(0.66vh + 0.66vw)",paddingBottom:"calc(0.66vh + 0.66vw)"},leftBottomCard:{paddingRight:"calc(0.66vh + 0.66vw)"},rightCard:{paddingBottom:"calc(0.66vh + 0.66vw)"}}},L=function(e){function t(e){n(this,t);var a=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.getCallWorkboardCard=function(e){return d.default.createElement(p.default,{className:e.leftCard,item:!0,xs:6},(!a.state.overview||0===a.state.overview.completedCallingMinutes&&0===a.state.overview.expectedCallingMinutes)&&d.default.createElement(u.default,{title:"Call Workboard",icon:d.default.createElement(P.default,{className:e.icon})},d.default.createElement("div",{className:e.noItem},d.default.createElement(F.default,{className:e.infoIcon}),"There are no calls to make today.")),a.state.overview.expectedCallingMinutes>0&&d.default.createElement(g.Link,{className:e.link,to:"/call-workboard"},d.default.createElement(u.default,{customCard:e.cardStyle,title:"Call Workboard",icon:d.default.createElement(P.default,{className:e.icon})},a.state.overview.completedCallingMinutes>0&&d.default.createElement(v.default,{data:a.state.overview}),0===a.state.overview.completedCallingMinutes&&0!==a.state.overview.expectedCallingMinutes&&d.default.createElement(C.default,{data:a.state.overview}))))},a.state={loadingOverviewFailed:!1,loadingOverview:!0},H.overviewService.getSummary().then(function(e){a.setState({loadingOverview:!1}),a.setState({loadingOverviewFailed:!1}),a.setState({overview:e})}).catch(function(e){a.setState({loadingOverview:!1}),a.setState({loadingOverviewFailed:!0})}),a}return r(t,e),o(t,[{key:"render",value:function(){var e=this.props.classes;return d.default.createElement("div",null,d.default.createElement("div",{className:e.appFrame},d.default.createElement(G.default,null),d.default.createElement(D.default,null),d.default.createElement("div",{className:e.root},d.default.createElement(p.default,{container:!0,style:{margin:"0"}},d.default.createElement(p.default,{item:!0,xs:8},d.default.createElement("div",{className:e.titleName}," My Daily Workboard ")),d.default.createElement(p.default,{item:!0,container:!0,xs:4,justify:"flex-end",className:e.rightGrid},d.default.createElement("img",{src:"/tovo/static/HRC-White-logo.svg",className:e.branding}),d.default.createElement("div",{className:e.headerBifurcator})),!this.state.loadingOverviewFailed&&this.state.overview&&this.getCallWorkboardCard(e),!this.state.loadingOverviewFailed&&void 0===this.state.overview&&d.default.createElement(p.default,{className:e.leftCard,item:!0,xs:6},d.default.createElement(u.default,{customCard:e.cardStyle,title:"Call Workboard",icon:d.default.createElement(P.default,{className:e.icon})},d.default.createElement("div",{className:e.loadingDiv},d.default.createElement(A.default,{className:e.progress,size:50})))),this.state.loadingOverviewFailed&&d.default.createElement(p.default,{className:e.leftCard,item:!0,xs:6},d.default.createElement(u.default,{title:"Call Workboard",icon:d.default.createElement(P.default,{className:e.icon})},d.default.createElement("div",{className:e.loadingDiv,onClick:this.getOverviewResponse},d.default.createElement(w.default,{className:e.retryButton}),d.default.createElement(E.default,{className:e.retryMsg},"Something Went Wrong."),d.default.createElement(E.default,{className:e.retryMsg},"Please retry")))),d.default.createElement(p.default,{className:e.rightCard,item:!0,xs:6},d.default.createElement(u.default,{title:"Correspondence",icon:d.default.createElement(S.default,{className:e.icon})},d.default.createElement("div",{className:e.comingSoon},"COMING SOON"))),d.default.createElement(p.default,{className:e.leftBottomCard,item:!0,xs:6},d.default.createElement(u.default,{title:"Pending Customer Queries",icon:d.default.createElement(O.default,{className:e.icon})},d.default.createElement("div",{className:e.comingSoon},"COMING SOON"))),d.default.createElement(p.default,{item:!0,xs:6},d.default.createElement(u.default,{title:"Missed Voice Calls",icon:d.default.createElement(j.default,{className:e.icon})},d.default.createElement("div",{className:e.comingSoon},"COMING SOON")))))))}}]),t}(c.Component);t.default=(0,m.withStyles)(B,{withTheme:!0})(L)},6069:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function n(){return o.default.get(d.default.apiUrl+"/overview").then(function(e){return(0,s.handleApiResponse)(e)}).catch(function(e){return(0,s.handleApiResponse)(e)})}function i(e){return o.default.get(d.default.apiUrl+"/upcoming",{params:e}).then(function(e){return(0,s.handleApiResponse)(e)}).catch(function(e){return(0,s.handleApiResponse)(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.overviewService=void 0;var r=a(45),o=l(r),c=a(44),d=l(c),s=a(165);t.overviewService={getSummary:n,getUpcoming:i}},6070:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,a,l){return a&&e(t.prototype,a),l&&e(t,l),t}}(),c=a(0),d=l(c),s=a(356),u=l(s),m=function(e){function t(e){n(this,t);var a=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={series:[{name:"Customer Data",data:a.props.data}]},a}return r(t,e),o(t,[{key:"highChartsRender",value:function(){var e=this.props,t=e.chartType,a=void 0===t?"pie":t,l=e.enableCredits,n=void 0!==l&&l,i=e.enableToolTips,r=void 0!==i&&i,o=e.chartHeight,c=void 0===o?"80%":o,d=(e.backgroundColor,e.verticalAlignTitle),s=void 0===d?"middle":d,m=e.alignTitle,f=void 0===m?"center":m,p=e.floatingTitle,g=void 0===p||p,h=e.titleText,v=void 0===h?"":h,y=e.subtitleText,C=void 0===y?"":y,b=(e.titleFontSize,e.titleColor),E=void 0===b?"#FFFFFF":b,x=e.titleX,w=void 0===x?0:x,N=e.titleY,S=void 0===N?-5:N,T=e.titleFontFamily,O=void 0===T?"Roboto":T,_=(e.subtitleFontSize,e.legendVisible),j=void 0!==_&&_,M=e.legendX,F=void 0===M?0:M,z=e.legendY,P=void 0===z?5:z,k=e.legendAlign,D=void 0===k?"center":k,I=e.legendVerticalAlign,A=void 0===I?"bottom":I,R=e.legendFontSize,G=void 0===R?"5px":R,H=e.legendSquareSymbol,B=void 0===H||H,L=e.enableDataLabels,W=void 0!==L&&L,U=e.dataLabelColor,V=void 0===U?"#CCCCCC":U,$=e.dataLabelFontWeight,q=void 0===$?"none":$,X=e.dataLabelFontFamily,Y=void 0===X?"Roboto":X,J=e.holeSize,Q=void 0===J?"0":J,K=e.size,Z=void 0===K?"80%":K,ee=e.center,te=void 0===ee?["50%","50%"]:ee;u.default.chart({credits:{enabled:n},chart:{type:a,renderTo:this.props.id,backgroundColor:"transparent",height:c,borderRadius:0},tooltip:{enabled:r},title:{verticalAlign:s,align:f,floating:g,text:v,widthAdjust:"50%",style:{fontSize:"1.5rem",color:E,fontFamily:O,opacity:.8},x:w,y:S},subtitle:{verticalAlign:s,align:f,floating:g,text:C,style:{fontSize:"0.8rem",color:E,fontFamily:O,paddingTop:"50px",marginTop:"2rem",opacity:.8},x:w,y:17},legend:{align:D,verticalAlign:A,x:F,y:P,fontSize:G,squareSymbol:B,itemStyle:{fontSize:"8px",color:"#CCCCCC"},itemHoverStyle:{fontSize:"8px",color:"#CCCCCC",cursor:"mouse"}},plotOptions:{pie:{dataLabels:{format:"{point.name}: {point.percentage:.1f} %",enabled:W,style:{color:V,fontWeight:q,fontFamily:Y,shadow:!1}},borderWidth:0,showInLegend:j,size:Z,center:te,innerSize:Q}},series:this.state.series})}},{key:"componentDidMount",value:function(){this.highChartsRender()}},{key:"render",value:function(){return d.default.createElement("div",null,d.default.createElement("div",{id:this.props.id}),this.props.children)}}]),t}(c.Component);t.default=m},6080:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,a,l){return a&&e(t.prototype,a),l&&e(t,l),t}}(),c=a(0),d=l(c),s=a(8),u=l(s),m=a(19),f=a(37),p=l(f),g=a(6070),h=l(g),v=a(82),y=a(333),C=l(y),b=(a(316),function(e){return{borderGrid:{borderRight:"solid 1px  #395C73",borderLeft:"solid 1px  #395C73"},containerGrid:{},parentGrid:{height:"90%"},chartGrid:{width:"8.444444444444445em",height:"26.85vh",paddingBottom:"0px"},textGrid:{paddingTop:"0px",height:"10%"},gridText:{color:e.palette.primary.main,fontSize:"0.88rem"},text:{width:"7.9vw",fontSize:"0.88rem",opacity:.6},spentOnCallDiv:{height:"75%",paddingTop:"2%",margin:"auto"},chart:{height:"18vh"},number:{color:e.palette.primary.main},calledHours:{color:"#CCCCCC",display:"flex",flexDirection:"row",marginLeft:"-1.5em",paddingLeft:"0px",textAlign:"center"},calledHoursNum:{fontSize:"1.5em",color:"#CCCCCC"},calledHoursText:{fontSize:"1em",paddingTop:"85%"},calledHoursTotal:{marginTop:"0px",opacity:.65,color:e.palette.primary.main,fontSize:"0.5em"},subScript:{fontSize:"0.8rem",position:"relative",marginBottom:"1.6666666666666667em",color:e.palette.primary.main},timeLogoImg:{width:"calc(1.6vh + 1.6vw)",height:"calc(1.6vh + 1.6vw)",color:"#5DAAE0",paddingRight:"2px"},timeLogo:{width:"2em",height:"2em"},timeGrid:{marginLeft:"0px"},timeDiv:{},innerChart:{},timeSpentHours:{color:"white",fontSize:"1.5rem",opacity:.65},estimatedHours:{color:"white",fontSize:".8rem"},zeroPadding:{padding:"0px"},timeSpentParent:{display:"flex",alignItems:"center",justifyContent:"center"},donutBackground:{}}}),E=function(e){function t(e){n(this,t);var a=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={},a}return r(t,e),o(t,[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.theme,l=Math.floor(this.props.data.completedCallingMinutes),n=Math.floor(this.props.data.completedCallingMinutes/60),i=Math.floor(this.props.data.completedCallingMinutes%60),r=Math.floor(this.props.data.expectedCallingMinutes),o=Math.floor(this.props.data.expectedCallingMinutes/60),c=Math.floor(this.props.data.expectedCallingMinutes%60),s=[{name:"totalCalled",y:this.props.data.processedCustomerCount,color:"#5DAAE0"},{name:"total to be called",y:this.props.data.totalCustomerCount-this.props.data.processedCustomerCount,color:" #324C5F"}],m=[{name:"totalCalled",y:this.props.data.totalPastDueProcessed,color:"#5DAAE0"},{name:"total to be called",y:this.props.data.totalPastDueAmount-this.props.data.totalPastDueProcessed,color:" #324C5F"}];return d.default.createElement(p.default,{container:!0,className:t.parentGrid,alignItems:"center",justify:"center"},d.default.createElement(p.default,{item:!0,container:!0,spacing:8,className:t.containerGrid},d.default.createElement(p.default,{className:(0,u.default)(t.chartGrid),item:!0,xs:4,container:!0,justify:"center",alignItems:"center"},d.default.createElement(p.default,{item:!0,xs:12,align:"center",className:t.chart,container:!0,alignItems:"center"},d.default.createElement(p.default,{item:!0,align:"center",xs:12},d.default.createElement("div",{className:t.donutBackground},d.default.createElement(h.default,{theme:a,data:s,holeSize:"85%",title:"",id:"doughnut",size:"100%",titleText:this.props.data.processedCustomerCount,subtitleText:"of "+this.props.data.totalCustomerCount})))),d.default.createElement(p.default,{item:!0,xs:12,align:"center",className:t.gridText},d.default.createElement("div",{className:t.text}," Total Customers Called "))),d.default.createElement(p.default,{className:(0,u.default)(t.chartGrid,t.borderGrid),container:!0,item:!0,xs:4,justify:"center",alignItems:"center"},d.default.createElement(p.default,{item:!0,xs:12,lg:12,md:12,sm:12,className:t.chart,align:"center",justify:"center",alignItems:"center",container:!0},d.default.createElement(p.default,{item:!0,container:!0,xs:8,lg:8,md:9,sm:8,spacing:16,alignItems:"flex-start",justify:"center",className:t.innerChart},d.default.createElement(p.default,{item:!0,xs:3,style:{padding:"0px"}},d.default.createElement(C.default,{className:t.timeLogoImg})),d.default.createElement(p.default,{item:!0,container:!0,justify:"flex-start",xs:9,style:{padding:"0px"}},d.default.createElement(p.default,{item:!0,xs:12,lg:12,md:12,sm:12,className:t.calledHoursNum,align:"center"},d.default.createElement("div",{className:t.timeSpentParent},n>0&&d.default.createElement("div",{className:t.timeSpentHours},n,d.default.createElement("span",{className:t.subScript},"hr",i>0&&d.default.createElement("span",null," "))),(i>0||0===l)&&d.default.createElement("div",{className:t.timeSpentHours},i,d.default.createElement("span",{className:t.subScript},"min")))),d.default.createElement(p.default,{item:!0,xs:12,lg:12,md:12,sm:12,align:"center",style:{marginTop:".3em"}},d.default.createElement("div",{className:t.calledHoursTotal},d.default.createElement("span",{className:t.estimatedHours},"of  "),o>0&&d.default.createElement("span",{className:t.estimatedHours},o,"hr",c>0&&d.default.createElement("span",null," ")),(c>0||0===r)&&d.default.createElement("span",{className:t.estimatedHours},c,"min"),d.default.createElement("span",{className:t.estimatedHours}," approx. ")))))),d.default.createElement(p.default,{item:!0,xs:12,align:"center",className:t.gridText},d.default.createElement("div",{className:t.text}," Time Spent on Call "))),d.default.createElement(p.default,{className:(0,u.default)(t.chartGrid),item:!0,xs:4,alignItems:"center",justify:"center",container:!0},d.default.createElement(p.default,{item:!0,xs:12,align:"center",className:t.chart,container:!0,justify:"center",alignItems:"center"},d.default.createElement(p.default,{item:!0,xs:12,align:"center"},d.default.createElement("div",{className:t.donutBackground},d.default.createElement(h.default,{theme:a,data:m,holeSize:0,title:"",id:"pie",size:"100%",titleText:"$"+(0,v.formatter)(this.props.data.totalPastDueProcessed),subtitleText:"of $"+(0,v.formatter)(this.props.data.totalPastDueAmount)})))),d.default.createElement(p.default,{item:!0,xs:12,align:"center",className:t.gridText},d.default.createElement("div",{className:t.text}," Total Past Due Touched ")))))}}]),t}(d.default.Component);t.default=(0,m.withStyles)(b,{withTheme:!0})(E)},6081:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,a,l){return a&&e(t.prototype,a),l&&e(t,l),t}}(),d=a(0),s=l(d),u=a(8),m=l(u),f=a(19),p=a(37),g=l(p),h=a(6070),v=(l(h),a(38)),y=(l(v),a(82)),C=a(333),b=l(C),E=function(e){var t;return t={borderRight:{borderRight:"solid 1px #395C73"},calledHoursTotal:{marginTop:"0px",margin:"auto",marginBottom:"52%",color:"#CCCCCC",fontSize:"0.7222222222222222em"},containerGrid:{paddingTop:"2.4rem",height:"90%"},chartGrid:{width:"30%",height:"30vh",display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column"},textGrid:{paddingTop:"0px",height:"10%"},gridText:{color:e.palette.primary.main,fontSize:"0.8rem",width:"40%",textAlign:"center",verticalAlign:"middle",opacity:.65,fontFamily:e.font.title.fontFamily},spentOnCallDiv:{height:"75%",margin:"auto"},chart:{height:"75%"},data:{height:"75%",color:e.palette.primary.main},number:{color:e.palette.primary.main},innerCallingGridDiv:{display:"flex",flexDirection:"column",height:"40%"},calledHours:{color:"#CCCCCC",display:"flex",flexDirection:"row",textAlign:"center",margin:"auto",marginTop:"1.6666666666666667em",marginBottom:"0px",paddingRight:"1.2em"},calledHoursNum:{fontSize:"1.5rem",position:"relative",color:"#FFFFFF",opacity:.65},calledHoursText:{fontSize:"1em",paddingTop:"85%"}},o(t,"calledHoursTotal",{marginTop:"0px",color:"#CCCCCC",fontSize:"0.7222222222222222em"}),o(t,"subScript",{fontSize:"0.6666666666666666em",position:"relative",marginBottom:"1.6666666666666667em"}),o(t,"timeLogo",{width:"2.2222222222222223em",height:"2.2222222222222223em"}),o(t,"message",{padding:"1%",paddingLeft:"5%",color:e.palette.primary.main,font:"0.9em",fontFamily:e.font.title.fontFamily}),o(t,"button",{margin:e.spacing.unit,left:"5%",top:"2%"}),o(t,"logo",{width:"calc(1.6vh + 1.6vw)",height:"calc(1.6vh + 1.6vw)",color:"#5DAAE0"}),t},x=function(e){function t(e){n(this,t);var a=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={hour:null,minute:null},a.timeTotal=Math.floor(a.props.data.expectedCallingMinutes),a.hour=Math.floor(a.props.data.expectedCallingMinutes/60),a.minute=Math.floor(a.props.data.expectedCallingMinutes%60),a}return r(t,e),c(t,[{key:"render",value:function(){var e=this.props.classes;return s.default.createElement("div",null,s.default.createElement(g.default,{container:!0,spacing:0,className:e.containerGrid,align:"center"},s.default.createElement(g.default,{className:(0,m.default)(e.chartGrid,e.borderRight),item:!0,xs:4,justify:"center",alignItems:"center"},s.default.createElement("div",{className:e.innerCallingGridDiv},s.default.createElement("div",{className:e.calledHours},s.default.createElement(g.default,{container:!0,direction:"row",spacing:8},s.default.createElement(g.default,{item:!0},s.default.createElement("img",{className:e.logo,src:"/tovo/static/baseline-call.svg"})),s.default.createElement(g.default,{item:!0},s.default.createElement("div",{className:e.calledHoursNum},this.props.data.totalCustomerCount))))),s.default.createElement("div",{className:e.gridText}," Total Calls to Make ")),s.default.createElement(g.default,{className:(0,m.default)(e.chartGrid,e.borderRight),item:!0,xs:4,justify:"center",align:"center"},s.default.createElement("div",{className:e.innerCallingGridDiv},s.default.createElement("div",{className:e.calledHours},s.default.createElement(g.default,{container:!0,spacing:8,direction:"row",justify:"center",alignItems:"center"},s.default.createElement(g.default,{item:!0},s.default.createElement(b.default,{className:e.logo})),s.default.createElement(g.default,{item:!0},s.default.createElement("div",{className:e.calledHoursNum},this.hour>0&&s.default.createElement("span",{style:{fontSize:"1.5rem"}},this.hour,s.default.createElement("span",{className:e.subScript},"hr")),(this.minute>0||0===this.timeTotal)&&s.default.createElement("span",{style:{fontSize:"1.5rem"}}," ",this.minute,s.default.createElement("span",{className:e.subScript},"min")," ")))))),s.default.createElement("div",{className:e.gridText}," Estimated Call Duration ")),s.default.createElement(g.default,{className:(0,m.default)(e.chartGrid),item:!0,xs:4,justify:"center",align:"center"},s.default.createElement("div",{className:e.innerCallingGridDiv},s.default.createElement("div",{className:e.calledHours},s.default.createElement(g.default,{container:!0,spacing:8,direction:"row",justify:"center",alignItems:"center"},s.default.createElement(g.default,{item:!0,align:"center"},s.default.createElement("img",{className:e.logo,src:"/tovo/static/money.svg"})),s.default.createElement(g.default,{item:!0,align:"center"},s.default.createElement("div",{className:e.calledHoursNum},(0,y.formatter)(this.props.data.totalPastDueAmount)))))),s.default.createElement("div",{className:e.gridText}," Total Amount Past Due ($) "))))}}]),t}(s.default.Component);t.default=(0,f.withStyles)(E)(x)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,